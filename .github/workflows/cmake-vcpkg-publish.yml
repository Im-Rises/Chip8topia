# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake Vcpkg Publish

on:
  push:
#    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, cl ] # clang and clang++ for cpp_compiler
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: Chip8topia-win64
            asset_name: Chip8topia-win64
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: Chip8topia-linux64
            asset_name: Chip8topia-linux64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install libs
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xorg-dev
          sudo apt-get install -y libglu1-mesa-dev

      - name: Install vcpgk
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          runVcpkgInstall: true

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Zip the asset into a zip file
        id: zip_asset
        run: |
          7z a -tzip ${{ github.workspace }}/Release/xtest-${{ matrix.os }}-${{ github.ref }}.zip ${{ github.workspace }}/Release/xtest*

      - name: Upload a release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.zip_asset.outputs.id }}
          asset_name: ${{ matrix.asset_name }}-${{ github.ref }}.zip
          asset_content_type: application/zip
          asset_label: ${{ matrix.asset_name }}-${{ github.ref }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}